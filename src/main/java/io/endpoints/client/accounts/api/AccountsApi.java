package io.endpoints.client.accounts.api;

import io.endpoints.client.accounts.model.Account;
import io.endpoints.client.accounts.model.AccountList;
import io.endpoints.client.accounts.model.Error;

import java.io.InputStream;
import java.io.OutputStream;
import java.util.List;
import java.util.Map;
import javax.ws.rs.*;
import javax.ws.rs.core.Response;
import javax.ws.rs.core.MediaType;
import org.apache.cxf.jaxrs.ext.multipart.*;

import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.responses.ApiResponses;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import javax.validation.constraints.*;
import javax.validation.Valid;

/**
 * Users Api
 *
 * <p>No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 */
@Path("/")
public interface AccountsApi  {

    /**
     * Get account details
     *
     */
    @GET
    @Path("/accounts/{accountId}")
    @Produces({ "application/json" })
    @Operation(summary = "Get account details", tags={ "accounts" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "Returns account details", content = @Content(schema = @Schema(implementation = Account.class))),
        @ApiResponse(responseCode = "200", description = "unexpected error", content = @Content(schema = @Schema(implementation = Error.class))) })
    public Account retrieveAccountDetails(@PathParam("accountId") String accountId, @QueryParam("userId") String userId);

    /**
     * Get accounts
     *
     */
    @GET
    @Path("/accounts")
    @Produces({ "application/json" })
    @Operation(summary = "Get accounts", tags={ "accounts" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "Returns accounts", content = @Content(schema = @Schema(implementation = AccountList.class))),
        @ApiResponse(responseCode = "200", description = "unexpected error", content = @Content(schema = @Schema(implementation = Error.class))) })
    public AccountList retrieveAccounts(@QueryParam("userId") String userId);
}
